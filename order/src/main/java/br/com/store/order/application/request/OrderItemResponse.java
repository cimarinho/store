/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.store.order.application.request;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrderItemResponse extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4921767197066473172L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderItemResponse\",\"namespace\":\"br.com.store.order.application.request\",\"fields\":[{\"name\":\"productName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderItemResponse> ENCODER =
      new BinaryMessageEncoder<OrderItemResponse>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderItemResponse> DECODER =
      new BinaryMessageDecoder<OrderItemResponse>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<OrderItemResponse> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<OrderItemResponse> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderItemResponse>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this OrderItemResponse to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a OrderItemResponse from a ByteBuffer. */
  public static OrderItemResponse fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.String productName;
  @Deprecated public double price;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderItemResponse() {}

  /**
   * All-args constructor.
   * @param productName The new value for productName
   * @param price The new value for price
   */
  public OrderItemResponse(java.lang.String productName, java.lang.Double price) {
    this.productName = productName;
    this.price = price;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return productName;
    case 1: return price;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: productName = (java.lang.String)value$; break;
    case 1: price = (java.lang.Double)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'productName' field.
   * @return The value of the 'productName' field.
   */
  public java.lang.String getProductName() {
    return productName;
  }

  /**
   * Sets the value of the 'productName' field.
   * @param value the value to set.
   */
  public void setProductName(java.lang.String value) {
    this.productName = value;
  }

  /**
   * Gets the value of the 'price' field.
   * @return The value of the 'price' field.
   */
  public java.lang.Double getPrice() {
    return price;
  }

  /**
   * Sets the value of the 'price' field.
   * @param value the value to set.
   */
  public void setPrice(java.lang.Double value) {
    this.price = value;
  }

  /**
   * Creates a new OrderItemResponse RecordBuilder.
   * @return A new OrderItemResponse RecordBuilder
   */
  public static br.com.store.order.application.request.OrderItemResponse.Builder newBuilder() {
    return new br.com.store.order.application.request.OrderItemResponse.Builder();
  }

  /**
   * Creates a new OrderItemResponse RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderItemResponse RecordBuilder
   */
  public static br.com.store.order.application.request.OrderItemResponse.Builder newBuilder(br.com.store.order.application.request.OrderItemResponse.Builder other) {
    return new br.com.store.order.application.request.OrderItemResponse.Builder(other);
  }

  /**
   * Creates a new OrderItemResponse RecordBuilder by copying an existing OrderItemResponse instance.
   * @param other The existing instance to copy.
   * @return A new OrderItemResponse RecordBuilder
   */
  public static br.com.store.order.application.request.OrderItemResponse.Builder newBuilder(br.com.store.order.application.request.OrderItemResponse other) {
    return new br.com.store.order.application.request.OrderItemResponse.Builder(other);
  }

  /**
   * RecordBuilder for OrderItemResponse instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderItemResponse>
    implements org.apache.avro.data.RecordBuilder<OrderItemResponse> {

    private java.lang.String productName;
    private double price;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.store.order.application.request.OrderItemResponse.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.productName)) {
        this.productName = data().deepCopy(fields()[0].schema(), other.productName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OrderItemResponse instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.store.order.application.request.OrderItemResponse other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.productName)) {
        this.productName = data().deepCopy(fields()[0].schema(), other.productName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.price)) {
        this.price = data().deepCopy(fields()[1].schema(), other.price);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'productName' field.
      * @return The value.
      */
    public java.lang.String getProductName() {
      return productName;
    }

    /**
      * Sets the value of the 'productName' field.
      * @param value The value of 'productName'.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderItemResponse.Builder setProductName(java.lang.String value) {
      validate(fields()[0], value);
      this.productName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'productName' field has been set.
      * @return True if the 'productName' field has been set, false otherwise.
      */
    public boolean hasProductName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'productName' field.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderItemResponse.Builder clearProductName() {
      productName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'price' field.
      * @return The value.
      */
    public java.lang.Double getPrice() {
      return price;
    }

    /**
      * Sets the value of the 'price' field.
      * @param value The value of 'price'.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderItemResponse.Builder setPrice(double value) {
      validate(fields()[1], value);
      this.price = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'price' field has been set.
      * @return True if the 'price' field has been set, false otherwise.
      */
    public boolean hasPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'price' field.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderItemResponse.Builder clearPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderItemResponse build() {
      try {
        OrderItemResponse record = new OrderItemResponse();
        record.productName = fieldSetFlags()[0] ? this.productName : (java.lang.String) defaultValue(fields()[0]);
        record.price = fieldSetFlags()[1] ? this.price : (java.lang.Double) defaultValue(fields()[1]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderItemResponse>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderItemResponse>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderItemResponse>
    READER$ = (org.apache.avro.io.DatumReader<OrderItemResponse>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
