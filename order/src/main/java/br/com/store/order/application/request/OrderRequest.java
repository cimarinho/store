/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package br.com.store.order.application.request;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class OrderRequest extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 2852640119012359072L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"OrderRequest\",\"namespace\":\"br.com.store.order.application.request\",\"fields\":[{\"name\":\"idOrder\",\"type\":\"int\"},{\"name\":\"totalPrice\",\"type\":\"double\"},{\"name\":\"orderDate\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"idClient\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"items\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"OrderItemRequest\",\"fields\":[{\"name\":\"productName\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"price\",\"type\":\"double\"}]}}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<OrderRequest> ENCODER =
      new BinaryMessageEncoder<OrderRequest>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<OrderRequest> DECODER =
      new BinaryMessageDecoder<OrderRequest>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<OrderRequest> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<OrderRequest> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<OrderRequest>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this OrderRequest to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a OrderRequest from a ByteBuffer. */
  public static OrderRequest fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public int idOrder;
  @Deprecated public double totalPrice;
  @Deprecated public java.lang.String orderDate;
  @Deprecated public java.lang.String idClient;
  @Deprecated public java.util.List<br.com.store.order.application.request.OrderItemRequest> items;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public OrderRequest() {}

  /**
   * All-args constructor.
   * @param idOrder The new value for idOrder
   * @param totalPrice The new value for totalPrice
   * @param orderDate The new value for orderDate
   * @param idClient The new value for idClient
   * @param items The new value for items
   */
  public OrderRequest(java.lang.Integer idOrder, java.lang.Double totalPrice, java.lang.String orderDate, java.lang.String idClient, java.util.List<br.com.store.order.application.request.OrderItemRequest> items) {
    this.idOrder = idOrder;
    this.totalPrice = totalPrice;
    this.orderDate = orderDate;
    this.idClient = idClient;
    this.items = items;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return idOrder;
    case 1: return totalPrice;
    case 2: return orderDate;
    case 3: return idClient;
    case 4: return items;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: idOrder = (java.lang.Integer)value$; break;
    case 1: totalPrice = (java.lang.Double)value$; break;
    case 2: orderDate = (java.lang.String)value$; break;
    case 3: idClient = (java.lang.String)value$; break;
    case 4: items = (java.util.List<br.com.store.order.application.request.OrderItemRequest>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'idOrder' field.
   * @return The value of the 'idOrder' field.
   */
  public java.lang.Integer getIdOrder() {
    return idOrder;
  }

  /**
   * Sets the value of the 'idOrder' field.
   * @param value the value to set.
   */
  public void setIdOrder(java.lang.Integer value) {
    this.idOrder = value;
  }

  /**
   * Gets the value of the 'totalPrice' field.
   * @return The value of the 'totalPrice' field.
   */
  public java.lang.Double getTotalPrice() {
    return totalPrice;
  }

  /**
   * Sets the value of the 'totalPrice' field.
   * @param value the value to set.
   */
  public void setTotalPrice(java.lang.Double value) {
    this.totalPrice = value;
  }

  /**
   * Gets the value of the 'orderDate' field.
   * @return The value of the 'orderDate' field.
   */
  public java.lang.String getOrderDate() {
    return orderDate;
  }

  /**
   * Sets the value of the 'orderDate' field.
   * @param value the value to set.
   */
  public void setOrderDate(java.lang.String value) {
    this.orderDate = value;
  }

  /**
   * Gets the value of the 'idClient' field.
   * @return The value of the 'idClient' field.
   */
  public java.lang.String getIdClient() {
    return idClient;
  }

  /**
   * Sets the value of the 'idClient' field.
   * @param value the value to set.
   */
  public void setIdClient(java.lang.String value) {
    this.idClient = value;
  }

  /**
   * Gets the value of the 'items' field.
   * @return The value of the 'items' field.
   */
  public java.util.List<br.com.store.order.application.request.OrderItemRequest> getItems() {
    return items;
  }

  /**
   * Sets the value of the 'items' field.
   * @param value the value to set.
   */
  public void setItems(java.util.List<br.com.store.order.application.request.OrderItemRequest> value) {
    this.items = value;
  }

  /**
   * Creates a new OrderRequest RecordBuilder.
   * @return A new OrderRequest RecordBuilder
   */
  public static br.com.store.order.application.request.OrderRequest.Builder newBuilder() {
    return new br.com.store.order.application.request.OrderRequest.Builder();
  }

  /**
   * Creates a new OrderRequest RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new OrderRequest RecordBuilder
   */
  public static br.com.store.order.application.request.OrderRequest.Builder newBuilder(br.com.store.order.application.request.OrderRequest.Builder other) {
    return new br.com.store.order.application.request.OrderRequest.Builder(other);
  }

  /**
   * Creates a new OrderRequest RecordBuilder by copying an existing OrderRequest instance.
   * @param other The existing instance to copy.
   * @return A new OrderRequest RecordBuilder
   */
  public static br.com.store.order.application.request.OrderRequest.Builder newBuilder(br.com.store.order.application.request.OrderRequest other) {
    return new br.com.store.order.application.request.OrderRequest.Builder(other);
  }

  /**
   * RecordBuilder for OrderRequest instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<OrderRequest>
    implements org.apache.avro.data.RecordBuilder<OrderRequest> {

    private int idOrder;
    private double totalPrice;
    private java.lang.String orderDate;
    private java.lang.String idClient;
    private java.util.List<br.com.store.order.application.request.OrderItemRequest> items;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(br.com.store.order.application.request.OrderRequest.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.idOrder)) {
        this.idOrder = data().deepCopy(fields()[0].schema(), other.idOrder);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[1].schema(), other.totalPrice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[2].schema(), other.orderDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.idClient)) {
        this.idClient = data().deepCopy(fields()[3].schema(), other.idClient);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.items)) {
        this.items = data().deepCopy(fields()[4].schema(), other.items);
        fieldSetFlags()[4] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing OrderRequest instance
     * @param other The existing instance to copy.
     */
    private Builder(br.com.store.order.application.request.OrderRequest other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.idOrder)) {
        this.idOrder = data().deepCopy(fields()[0].schema(), other.idOrder);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.totalPrice)) {
        this.totalPrice = data().deepCopy(fields()[1].schema(), other.totalPrice);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.orderDate)) {
        this.orderDate = data().deepCopy(fields()[2].schema(), other.orderDate);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.idClient)) {
        this.idClient = data().deepCopy(fields()[3].schema(), other.idClient);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.items)) {
        this.items = data().deepCopy(fields()[4].schema(), other.items);
        fieldSetFlags()[4] = true;
      }
    }

    /**
      * Gets the value of the 'idOrder' field.
      * @return The value.
      */
    public java.lang.Integer getIdOrder() {
      return idOrder;
    }

    /**
      * Sets the value of the 'idOrder' field.
      * @param value The value of 'idOrder'.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder setIdOrder(int value) {
      validate(fields()[0], value);
      this.idOrder = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'idOrder' field has been set.
      * @return True if the 'idOrder' field has been set, false otherwise.
      */
    public boolean hasIdOrder() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'idOrder' field.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder clearIdOrder() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'totalPrice' field.
      * @return The value.
      */
    public java.lang.Double getTotalPrice() {
      return totalPrice;
    }

    /**
      * Sets the value of the 'totalPrice' field.
      * @param value The value of 'totalPrice'.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder setTotalPrice(double value) {
      validate(fields()[1], value);
      this.totalPrice = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'totalPrice' field has been set.
      * @return True if the 'totalPrice' field has been set, false otherwise.
      */
    public boolean hasTotalPrice() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'totalPrice' field.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder clearTotalPrice() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'orderDate' field.
      * @return The value.
      */
    public java.lang.String getOrderDate() {
      return orderDate;
    }

    /**
      * Sets the value of the 'orderDate' field.
      * @param value The value of 'orderDate'.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder setOrderDate(java.lang.String value) {
      validate(fields()[2], value);
      this.orderDate = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'orderDate' field has been set.
      * @return True if the 'orderDate' field has been set, false otherwise.
      */
    public boolean hasOrderDate() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'orderDate' field.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder clearOrderDate() {
      orderDate = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'idClient' field.
      * @return The value.
      */
    public java.lang.String getIdClient() {
      return idClient;
    }

    /**
      * Sets the value of the 'idClient' field.
      * @param value The value of 'idClient'.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder setIdClient(java.lang.String value) {
      validate(fields()[3], value);
      this.idClient = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'idClient' field has been set.
      * @return True if the 'idClient' field has been set, false otherwise.
      */
    public boolean hasIdClient() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'idClient' field.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder clearIdClient() {
      idClient = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'items' field.
      * @return The value.
      */
    public java.util.List<br.com.store.order.application.request.OrderItemRequest> getItems() {
      return items;
    }

    /**
      * Sets the value of the 'items' field.
      * @param value The value of 'items'.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder setItems(java.util.List<br.com.store.order.application.request.OrderItemRequest> value) {
      validate(fields()[4], value);
      this.items = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'items' field has been set.
      * @return True if the 'items' field has been set, false otherwise.
      */
    public boolean hasItems() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'items' field.
      * @return This builder.
      */
    public br.com.store.order.application.request.OrderRequest.Builder clearItems() {
      items = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public OrderRequest build() {
      try {
        OrderRequest record = new OrderRequest();
        record.idOrder = fieldSetFlags()[0] ? this.idOrder : (java.lang.Integer) defaultValue(fields()[0]);
        record.totalPrice = fieldSetFlags()[1] ? this.totalPrice : (java.lang.Double) defaultValue(fields()[1]);
        record.orderDate = fieldSetFlags()[2] ? this.orderDate : (java.lang.String) defaultValue(fields()[2]);
        record.idClient = fieldSetFlags()[3] ? this.idClient : (java.lang.String) defaultValue(fields()[3]);
        record.items = fieldSetFlags()[4] ? this.items : (java.util.List<br.com.store.order.application.request.OrderItemRequest>) defaultValue(fields()[4]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<OrderRequest>
    WRITER$ = (org.apache.avro.io.DatumWriter<OrderRequest>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<OrderRequest>
    READER$ = (org.apache.avro.io.DatumReader<OrderRequest>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
